{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","nameInputId","uuidv4","telInputId","state","name","number","changeInput","e","inputName","currentTarget","setState","value","handleFormSubmit","preventDefault","Boolean","props","existContacts","find","element","alert","onFormSubmit","resetInput","this","onSubmit","className","styles","contactForm","htmlFor","contactForm__label","contactForm__title","id","type","contactForm__input","pattern","title","required","onChange","contactForm__button","Component","ContactList","contactsForList","onDeleteContact","contactList","map","contact","contactList__item","contactList__elem","contactList__button","onClick","Filter","onFilterValue","filter__title","filter__input","initialContacts","App","contacts","filter","addContact","contactData","deleteContact","contactId","prevState","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","myContacts","localStorage","getItem","parsedMyContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f89ca4a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__1T44i\",\"contactForm__label\":\"ContactForm_contactForm__label__2AoVE\",\"contactForm__input\":\"ContactForm_contactForm__input__1LueP\",\"contactForm__title\":\"ContactForm_contactForm__title__28vtR\",\"contactForm__button\":\"ContactForm_contactForm__button__38E0C\"};","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport styles from '../ContactForm/ContactForm.module.css';\n\nclass ContactForm extends Component {\n  nameInputId = uuidv4();\n  telInputId = uuidv4();\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  changeInput = e => {\n    const inputName = e.currentTarget.name;\n    this.setState({\n      [inputName]: e.currentTarget.value,\n    });\n  };\n\n  // checkContact = () => {\n  //   this.state.name ===\n  // }\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const checkContact = Boolean(\n      this.props.existContacts.find(\n        element => element.name === this.state.name,\n      ),\n    );\n    //console.log(checkContact===true);\n\n    checkContact\n      ? alert(`${this.state.name} is already in contacts`)\n      : this.props.onFormSubmit(this.state);\n\n    this.resetInput();\n  };\n\n  resetInput = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleFormSubmit} className={styles.contactForm}>\n        <label htmlFor={this.nameInputId} className={styles.contactForm__label}>\n          <span className={styles.contactForm__title}>Name:</span>\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            className={styles.contactForm__input}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            value={name}\n            required\n            onChange={this.changeInput}\n          />\n        </label>\n\n        <label htmlFor={this.telInputId} className={styles.contactForm__label}>\n          <span className={styles.contactForm__title}> Phone:</span>\n          <input\n            id={this.telInputId}\n            type=\"tel\"\n            name=\"number\"\n            className={styles.contactForm__input}\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            value={number}\n            required\n            onChange={this.changeInput}\n          />\n        </label>\n        <button type=\"submit\" className={styles.contactForm__button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from '../ContactList/ContactList.module.css';\n\nconst ContactList = ({ contactsForList, onDeleteContact }) => (\n  <ul className={styles.contactList}>\n    {contactsForList.map(contact => (\n      <li key={uuidv4()} className={styles.contactList__item}>\n        <span className={styles.contactList__elem}> {contact.name}:</span>\n        <span>{contact.number} </span>\n        <button\n          type=\"button\"\n          className={styles.contactList__button}\n          onClick={() => onDeleteContact(contact.id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contactsForList: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ContactList;\n","import { v4 as uuidv4 } from 'uuid';\nimport styles from '../Filter/Filter.module.css';\n\nconst Filter = ({ onFilterValue, value }) => (\n  <>\n    <p className={styles.filter__title}>Find contacts by name:</p>\n    <label htmlFor={uuidv4()} />\n    <input\n      className={styles.filter__input}\n      id={uuidv4()}\n      type=\"text\"\n      name=\"filter\"\n      onChange={onFilterValue}\n      value={value}\n    />\n  </>\n);\n\nexport default Filter;\n","import { Component } from 'react';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nimport './styles.css';\n\nconst initialContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n\n    filter: '',\n  };\n \n  // сохранение в LocalStorage\n  componentDidMount() {\n        const myContacts = localStorage.getItem('My Contacts');\n    const parsedMyContacts = JSON.parse(myContacts);\n\n    if (parsedMyContacts) {\n      this.setState({\n        contacts: parsedMyContacts,\n      });\n    } else {\n      this.setState({\n        contacts: initialContacts,\n      });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('My Contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const contactData = {\n      name,\n      number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [contactData, ...contacts],\n    }));\n  };\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(\n        contacts => contacts.id !== contactId,\n      ),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contacts =>\n      contacts.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Phonebook</h1>\n        <ContactForm onFormSubmit={this.addContact} existContacts={contacts} />\n        {/* filter */}\n        <Filter value={filter} onFilterValue={this.changeFilter} />\n\n        {contacts.length > 0 && (\n          <div>\n            <h2 className=\"subtitle\">Contacts</h2>\n            <ContactList\n              contactsForList={visibleContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3c3Va\",\"contactList__item\":\"ContactList_contactList__item__-mBaY\",\"contactList__elem\":\"ContactList_contactList__elem__2iGgG\",\"contactList__button\":\"ContactList_contactList__button__2nhbl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__title\":\"Filter_filter__title__MANeP\",\"filter__input\":\"Filter_filter__input__1WyLX\"};"],"sourceRoot":""}